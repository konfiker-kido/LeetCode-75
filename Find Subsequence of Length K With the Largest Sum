Example 1:

Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.
Example 2:

Input: nums = [-1,-2,3,4], k = 3
Output: [-1,3,4]
Explanation: 
The subsequence has the largest sum of -1 + 3 + 4 = 6.
Example 3:

Input: nums = [3,4,3,3], k = 2
Output: [3,4]
Explanation:
The subsequence has the largest sum of 3 + 4 = 7. 
Another possible subsequence is [4, 3].

----------------------------------------------- C++ Code -------------------------------------------------------------------------------------------------------------------

class Solution {
public:
  static bool cmp(pair<int,int> a,pair<int,int> b){     
    return (a.first>=b.first);
  }
 
 static bool sortIndex(pair<int,int> a,pair<int,int> b){
      return a.second<b.second;
  }
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        
     priority_queue<pair<int,int>> maxHeap; 
    
     for(int i=0;i<nums.size();i++)
       maxHeap.push({nums[i],i});   // {value,index}

       vector<pair<int,int>> con;
// Storing to con only first top k Max elements 
       while(k--){
           con.push_back({maxHeap.top().second,maxHeap.top().first});
           maxHeap.pop();
       }

       sort(con.begin(),con.end()); // sorting in Ascending Order according to index

       vector<int> ans;
       for(pair<int,int> p:con)
         ans.push_back(p.second); // storing the values to ans

         // these commented part is doing the same thing but getting over-flow error
    //     vector<int> ans;
    //     for(int i=0;i<nums.size();i++){
    //         con.push_back({nums[i],i});
    //     }
    //  // sorting in descending Order
    //   sort(con.begin(),con.end(),cmp);
      
    //   //sorting by their Indexes
    //    sort(con.begin(),con.begin()+k,sortIndex);
      
    //    for(int i=0;i<k;i++){
    //       pair<int,int> t=con[i];
    //       int value=t.first;    
    //       ans.push_back(value);
    //   }

       return   ans;
    }
};
